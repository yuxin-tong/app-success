@use "sass:map";
@use "@angular/material" as mat;

@mixin color($theme) {
  // Get the color config from the theme.
  $color-config: mat.get-color-config($theme);

  // Get the primary color palette from the color-config.
  $primary-palette: map.get($color-config, "primary");
  $warn-palette: map.get($color-config, "warn");

  $foreground: map.get($color-config, foreground);

  $disabled-color: mat.get-color-from-palette($foreground, icon);

  $dark-text-color: mat.get-color-from-palette(
    $primary-palette,
    "500-contrast"
  );
  $dark-link-color: mat.get-color-from-palette(
    $primary-palette,
    "900-contrast"
  );
  $dark-background-color: mat.get-color-from-palette($primary-palette, 800);
  $black: mat.get-color-from-palette($primary-palette, 900);

  $medium-background-color: mat.get-color-from-palette($primary-palette, 300);
  $medium-grey: mat.get-color-from-palette($primary-palette, "100-contrast");

  $light-text-color: mat.get-color-from-palette(
    $primary-palette,
    "50-contrast"
  );
  $light-link-color: mat.get-color-from-palette(
    $primary-palette,
    "300-contrast"
  );
  $light-background-color: mat.get-color-from-palette($primary-palette, 50);

  $warn-color: mat.get-color-from-palette($warn-palette);
  $warn-color-hover: mat.get-color-from-palette($warn-palette, 300);

  .accept-reject-dialog-panel mat-dialog-container {
    background-color: $light-background-color;

    mat-dialog-content {
      background-color: white;
    }
  }

  .body-container {
    background-color: $black;
  }

  .disabled-color {
    color: $disabled-color;
  }

  .dark-bg {
    color: $dark-text-color;
    background-color: $dark-background-color;

    a {
      color: $dark-link-color;

      &:hover,
      &:active,
      &:focus {
        color: $dark-link-color;
      }
    }
  }

  .main-container {
    color: $light-text-color;
    background-color: $light-background-color;

    a {
      color: $light-text-color;

      &:hover,
      &:active,
      &:focus {
        color: $light-link-color;
      }
    }

    app-user-sidebar,
    app-public-sidebar,
    app-mobile-footer {
      @extend .dark-bg;
    }

    mat-error a {
      color: $warn-color;
      &:hover,
      &:active,
      &:focus {
        color: $warn-color-hover;
      }
    }
  }

  app-mobile-public-drawer > div {
    @extend .dark-bg;
  }

  .user-top-dropdown-menu::before {
    border-top: 15px solid $light-background-color;
  }

  .password-policy-overlay {
    background-color: $light-background-color;

    @include mat.elevation(8);
  }

  .cookie-consent-alert {
    background-color: $medium-background-color;
    color: $light-text-color;
    margin-top: 60px !important;

    a {
      background-color: $medium-background-color;
      color: $light-text-color;

      &:hover,
      &:active,
      &:focus {
        color: $light-link-color;
      }
    }
  }
}

@mixin typography($theme) {
  // Get the typography config from the theme.
  $typography-config: mat.get-typography-config($theme);
  $small-font-size: mat.font-size($typography-config, "mat-small");

  mat-password-strength-info mat-card {
    font-size: 100px !important;
  }
}

@mixin theme($theme) {
  $color-config: mat.get-color-config($theme);
  @if $color-config != null {
    @include color($theme);
  }

  $typography-config: mat.get-typography-config($theme);
  @if $typography-config != null {
    @include typography($theme);
  }
}
